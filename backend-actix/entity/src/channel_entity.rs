//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use std::time::SystemTime;

use sea_orm::{entity::prelude::*, sqlx::types::{chrono::Utc, chrono::DateTime, uuid::uuid}, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "channel_entity")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    pub is_public: bool,
    #[sea_orm(primary_key, generated = true)]
    pub id: Uuid,
    pub owner_id: Option<Uuid>,
    pub created_at: String,
    pub description: String,
    pub name: String,
    pub updated_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel_members::Entity")]
    ChannelMembers,
    #[sea_orm(has_many = "super::message_entity::Entity")]
    MessageEntity,
    #[sea_orm(
        belongs_to = "super::profile_entity::Entity",
        from = "Column::OwnerId",
        to = "super::profile_entity::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ProfileEntity,
}

impl Related<super::channel_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelMembers.def()
    }
}

impl Related<super::message_entity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MessageEntity.def()
    }
}

impl Related<super::profile_entity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileEntity.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        let current_date: DateTime<Utc> = SystemTime::now().into();
        Self {
            is_public : Set(false),
            id: Set(Uuid::new_v4()),
            owner_id : Set(Option::Some(uuid!("00000000-0000-0000-0000-000000000000"))),
            created_at : Set(current_date.to_rfc3339()),
            description : Set("".to_owned()),
            name : Set("".to_owned()),
            updated_at : Set(current_date.to_rfc3339()),
            ..ActiveModelTrait::default()
        }
    }
}
