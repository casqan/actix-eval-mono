//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::{entity::prelude::*, Set};
use serde::{Deserialize, Serialize};

use crate::utils::time::get_current_time;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "message_entity")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    pub channel_id: Option<Uuid>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub sender_id: Option<Uuid>,
    pub content: String,
    pub created_at: String,
    pub r#type: String,
    pub updated_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::channel_entity::Entity",
        from = "Column::ChannelId",
        to = "super::channel_entity::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ChannelEntity,
    #[sea_orm(
        belongs_to = "super::profile_entity::Entity",
        from = "Column::SenderId",
        to = "super::profile_entity::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ProfileEntity,
}

impl Related<super::channel_entity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelEntity.def()
    }
}

impl Related<super::profile_entity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileEntity.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self{
            id: Set(Uuid::new_v4()),
            content: Set("".to_owned()),
            created_at: Set(get_current_time().to_rfc3339()),
            updated_at: Set(get_current_time().to_rfc3339()),
            r#type:Set("text".to_owned()),
            ..ActiveModelTrait::default()
        }
    }
}
